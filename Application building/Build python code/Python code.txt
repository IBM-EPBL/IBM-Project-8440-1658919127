 "import re\n",
        "import numpy as np\n",
        "import os\n",
        "from flask import Flask, app,request,render_template\n",
        "import sys\n",
        "from flask import Flask, request, render_template, redirect, url_for\n",
        "import argparse\n",
        "from tensorflow import keras\n",
        "from PIL import Image\n",
        "from timeit import default_timer as timer\n",
        "import test\n",
        "from pyngrok import ngrok\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import random\n",
        "\n",
        "def get_parent_dir(n=1):\n",
        "    \"\"\" returns the n-th parent dicrectory of the current\n",
        "    working directory \"\"\"\n",
        "    current_path = os.path.dirname(os.path.abspath(__file__))\n",
        "    for k in range(n):\n",
        "        current_path = os.path.dirname(current_path)\n",
        "    return current_path\n",
        "\n",
        "\n",
        "src_path=r'/content/drive/MyDrive/IBM_PROJECT/yolo_structure/2_Training/src'\n",
        "print(src_path)\n",
        "utils_path=r'/content/drive/MyDrive/IBM_PROJECT/yolo_structure/Utils'\n",
        "print(utils_path)\n",
        "\n",
        "sys.path.append(src_path)\n",
        "sys.path.append(utils_path)\n",
        "\n",
        "import argparse\n",
        "from keras_yolo3.yolo import YOLO, detect_video\n",
        "from PIL import Image\n",
        "from timeit import default_timer as timer\n",
        "from utils import load_extractor_model, load_features, parse_input, detect_object\n",
        "import test\n",
        "import utils\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from Get_File_Paths import GetFileList\n",
        "import random\n",
        "\n",
        "os.environ[\"TF_CPP_MIN_LOG_LEVEL\"] = \"3\"\n",
        "\n",
        "# Set up folder names for default values\n",
        "data_folder = os.path.join(get_parent_dir(n=1), \"yolo_structure\", \"Data\")\n",
        "\n",
        "image_folder = os.path.join(data_folder, \"Source_Images\")\n",
        "\n",
        "image_test_folder = os.path.join(image_folder, \"Test_Images\")\n",
        "\n",
        "detection_results_folder = os.path.join(image_folder, \"Test_Image_Detection_Results\")\n",
        "detection_results_file = os.path.join(detection_results_folder, \"Detection_Results.csv\")\n",
        "\n",
        "model_folder = os.path.join(data_folder, \"Model_Weights\")\n",
        "\n",
        "model_weights = os.path.join(model_folder, \"trained_weights_final.h5\")\n",
        "model_classes = os.path.join(model_folder, \"data_classes.txt\")\n",
        "\n",
        "anchors_path = os.path.join(src_path, \"keras_yolo3\", \"model_data\", \"yolo_anchors.txt\")\n",
        "\n",
        "FLAGS = None\n",
        "\n",
        "\n",
        "from cloudant.client import Cloudant\n",
        "\n",
        "# Authenticate using an IAM API key\n",
        "client = Cloudant.iam('ef7f4729-2486-45c5-a7fa-f4140373e2e6-bluemix','6GfFjs3engXLnSJB8Kp4fbs7HTKwrJpWJE7wNPGzZPVW', connect=True)\n",
        "\n",
        "\n",
        "# Create a database using an initialized client\n",
        "my_database = client.create_database('my_database')\n",
        "\n",
        "\n",
        "app=Flask(__name__)\n",
        "port_no=5000\n",
        "ngrok.set_auth_token(\"2H7aM94zEuTa40t3J6jKpIqWAc3_B2UxzZs6qxetntgadxQW\")\n",
        "public_url =  ngrok.connect(port_no).public_url\n",
        "print(f\"To acces the Gloable link please click {public_url}\")\n",
        "\n",
        "#default home page or route\n",
        "@app.route('/')\n",
        "def index():\n",
        "    return render_template('index.html')\n",
        "\n",
        "\n",
        "\n",
        "@app.route('/index.html')\n",
        "def home():\n",
        "    return render_template(\"index.html\")\n",
        "\n",
        "\n",
        "#registration page\n",
        "@app.route('/register')\n",
        "def register():\n",
        "    return render_template('register.html')\n",
        "\n",
        "@app.route('/afterreg', methods=['POST'])\n",
        "def afterreg():\n",
        "    x = [x for x in request.form.values()]\n",
        "    print(x)\n",
        "    data = {\n",
        "    '_id': x[1], # Setting _id is optional\n",
        "    'name': x[0],\n",
        "    'psw':x[2]\n",
        "    }\n",
        "    print(data)\n",
        "    \n",
        "    query = {'_id': {'$eq': data['_id']}}\n",
        "    \n",
        "    docs = my_database.get_query_result(query)\n",
        "    print(docs)\n",
        "    \n",
        "    print(len(docs.all()))\n",
        "    \n",
        "    if(len(docs.all())==0):\n",
        "        url = my_database.create_document(data)\n",
        "        #response = requests.get(url)\n",
        "        return render_template('register.html', pred=\"Registration Successful, please login using your details\")\n",
        "    else:\n",
        "        return render_template('register.html', pred=\"You are already a member, please login using your details\")\n",
        "\n",
        "#login page\n",
        "@app.route('/login')\n",
        "def login():\n",
        "    return render_template('login.html')\n",
        "\n",
        "@app.route('/afterlogin',methods=['POST'])\n",
        "def afterlogin():\n",
        "    user = request.form['_id']\n",
        "    passw = request.form['psw']\n",
        "    print(user,passw)\n",
        "    \n",
        "    query = {'_id': {'$eq': user}}    \n",
        "    \n",
        "    docs = my_database.get_query_result(query)\n",
        "    print(docs)\n",
        "    \n",
        "    print(len(docs.all()))\n",
        "    \n",
        "    if(len(docs.all())==0):\n",
        "        return render_template('login.html', pred=\"The username is not found.\")\n",
        "    else:\n",
        "        if((user==docs[0][0]['_id'] and passw==docs[0][0]['psw'])):\n",
        "            return redirect(url_for('prediction'))\n",
        "        else:\n",
        "            print('Invalid User')\n",
        "    \n",
        "    \n",
        "@app.route('/logout')\n",
        "def logout():\n",
        "    return render_template('logout.html')\n",
        "\n",
        "@app.route('/prediction')\n",
        "def prediction():\n",
        "    return render_template('prediction.html',path=\"../static/img/6623.jpg\",)\n",
        "\n",
        "\n",
        "@app.route('/result',methods=[\"GET\",\"POST\"])\n",
        "def res():\n",
        "    # Delete all default flags\n",
        "    parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS)\n",
        "    \"\"\"\n",
        "    Command line options\n",
        "    \"\"\"\n",
        "    f = request.files['file']\n",
        "    f.save(\"./drive/MyDrive/IBM_PROJECT/Flask/static/img/\"+f.filename)\n",
        "    \n",
        "\n",
        "    \n",
        "    \n",
        "    parser.add_argument(\n",
        "        \"--input_path\",\n",
        "        type=str,\n",
        "        default=image_test_folder,\n",
        "        help=\"Path to image/video directory. All subdirectories will be included. Default is \"\n",
        "        + image_test_folder,\n",
        "    )\n",
        "\n",
        "    parser.add_argument(\n",
        "        \"--output\",\n",
        "        type=str,\n",
        "        default=detection_results_folder,\n",
        "        help=\"Output path for detection results. Default is \"\n",
        "        + detection_results_folder,\n",
        "    )\n",
        "\n",
        "    parser.add_argument(\n",
        "        \"--no_save_img\",\n",
        "        default=False,\n",
        "        action=\"store_true\",\n",
        "        help=\"Only save bounding box coordinates but do not save output images with annotated boxes. Default is False.\",\n",
        "    )\n",
        "\n",
        "    parser.add_argument(\n",
        "        \"--file_types\",\n",
        "        \"--names-list\",\n",
        "        nargs=\"*\",\n",
        "        default=[],\n",
        "        help=\"Specify list of file types to include. Default is --file_types .jpg .jpeg .png .mp4\",\n",
        "    )\n",
        "\n",
        "    parser.add_argument(\n",
        "        \"--yolo_model\",\n",
        "        type=str,\n",
        "        dest=\"model_path\",\n",
        "        default=model_weights,\n",
        "        help=\"Path to pre-trained weight files. Default is \" + model_weights,\n",
        "    )\n",
        "\n",
        "    parser.add_argument(\n",
        "        \"--anchors\",\n",
        "        type=str,\n",
        "        dest=\"anchors_path\",\n",
        "        default=anchors_path,\n",
        "        help=\"Path to YOLO anchors. Default is \" + anchors_path,\n",
        "    )\n",
        "\n",
        "    parser.add_argument(\n",
        "        \"--classes\",\n",
        "        type=str,\n",
        "        dest=\"classes_path\",\n",
        "        default=model_classes,\n",
        "        help=\"Path to YOLO class specifications. Default is \" + model_classes,\n",
        "    )\n",
        "\n",
        "    parser.add_argument(\n",
        "        \"--gpu_num\", type=int, default=1, help=\"Number of GPU to use. Default is 1\"\n",
        "    )\n",
        "\n",
        "    parser.add_argument(\n",
        "        \"--confidence\",\n",
        "        type=float,\n",
        "        dest=\"score\",\n",
        "        default=0.25,\n",
        "        help=\"Threshold for YOLO object confidence score to show predictions. Default is 0.25.\",\n",
        "    )\n",
        "\n",
        "    parser.add_argument(\n",
        "        \"--box_file\",\n",
        "        type=str,\n",
        "        dest=\"box\",\n",
        "        default=detection_results_file,\n",
        "        help=\"File to save bounding box results to. Default is \"\n",
        "        + detection_results_file,\n",
        "    )\n",
        "\n",
        "    parser.add_argument(\n",
        "        \"--postfix\",\n",
        "        type=str,\n",
        "        dest=\"postfix\",\n",
        "        default=\"_disease\",\n",
        "        help='Specify the postfix for images with bounding boxes. Default is \"_disease\"',\n",
        "    )\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "    yolo = YOLO(\n",
        "        **{\n",
        "            \"model_path\": FLAGS.model_path,\n",
        "            \"anchors_path\": FLAGS.anchors_path,\n",
        "            \"classes_path\": FLAGS.classes_path,\n",
        "            \"score\": FLAGS.score,\n",
        "            \"gpu_num\": FLAGS.gpu_num,\n",
        "            \"model_image_size\": (416, 416),\n",
        "        }\n",
        "    )\n",
        "\n",
        "\n",
        "    img_path=\"/drive/MyDrive/IBM_PROJECT/Flask/static/img/\"+f.filename\n",
        "    prediction, image,lat,lon= detect_object(\n",
        "            yolo,\n",
        "            img_path,\n",
        "            save_img=save_img,\n",
        "            save_img_path=FLAGS.output,\n",
        "            postfix=FLAGS.postfix,\n",
        "    )\n",
        "            \n",
        "    yolo.close_session()\n",
        "    return render_template('prediction.html',prediction=str(prediction),path=\"../static/img/\"+f.filename)     \n",
        "   \n",
        "    \n",
        "\n",
        "\"\"\" Running our application \"\"\"\n",
        "if __name__ == \"__main__\":\n",
        "    app.run(port=port_no)"
     